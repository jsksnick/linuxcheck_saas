#!/bin/bash
#Author:Allen
#Descripttion:Collect server information
#company:canway

################################################################
export LANG="en_US.UTF-8"
systemnum=`cat /etc/redhat-release |grep -o '[0-9]' |head -n 1`
system_type=`dmesg |grep -i hypervisor`
################################################################
#############################参数配置###########################
umask_set=${1}
remote_timeout=${2}
password_max_day=${3}
password_min_day=${4}
password_min_length=${5}
password_warn_day=${6}
password_rem_times=${7}
password_try_times=${8}
password_lock_time=${9}
run_mode=${10}
sys_load_info=${11}
swap_use_status=${12}
disk_use_status=${13}
inode_use_status=${14}
login_failed_times=${15}
################################################################


#硬件服务器品牌
which dmidecode &> /dev/null
if [ $? -eq 0 ];then
ProductName=`dmidecode |grep 'Product Name:' |uniq |awk -F ':' '{print $2}' |awk  '{print $1}' |tr -d '\n'`
echo "product_name=${ProductName}"
fi

#cpu信息
cpu_num=`cat /proc/cpuinfo |grep "physical id" |uniq |wc -l`
echo "cpu_info=<table class^\"new_table\">" |tr -d '\n'
for i in `seq 1 ${cpu_num}`
do
    cpu_n=`cat /proc/cpuinfo |grep "physical id" |uniq |sed -n "${i}p"`
    read a b c d < <(echo $cpu_n)
    cpuinfo=`cat /proc/cpuinfo |egrep -B5  "^${a}.*${d}$" |grep "model name" | tail -n 1 | awk -F ':' '{print $2}' |sed 's/^[ \t]*//g'`
    echo "<tr><td>${cpuinfo}</td></tr>" |tr -d '\n'
done
echo "</table>"


#本地磁盘信息
disk_num=`fdisk -l 2> /dev/null |grep "Disk /dev/" |egrep -v 'mapper|dm' |awk '{print $2,$3,$4}' |uniq |awk -F/ '{print $3}' |sed s/[[:space:]]//g |wc -l`
echo "disk_info=<table class^\"new_table\">" |tr -d '\n'
for i in `seq 1 $disk_num`
do
    disk_info=`fdisk -l 2> /dev/null |grep "Disk /dev/" | egrep -v 'mapper|dm' |awk '{print $2,$3,$4}' |uniq |awk -F/ '{print $3}' |sed -n ${i}p |sed s/[[:space:]]//g |tr -d ',' |tr ':' ' '`
    read a b < <(echo ${disk_info})
    echo "<tr><td>$a</td><td>$b</td></tr>" |tr -d '\n'
done
echo "</table>"

#内存信息
mem_k=`cat /proc/meminfo |grep MemTotal |awk '{print $2}'`
bc=`which bc 2>/dev/null`
if [ -n "$bc" ];then
    mem_g=$(printf "%.2f" `echo "scale=2; ${mem_k}/1024/1024" |bc`)
else
    mem_g=`free -g |grep  Mem |awk '{print $2}'`
fi
mem_num=`dmidecode |grep DDR |wc -l`
if [ $mem_num != 0 ];then
    echo "mem_info=内存条数量:${mem_num}条,内存总量:${mem_g}G"
else
    echo "mem_info=内存总量:${mem_g}G"
fi

#光纤卡信息
lspci=`lspci 2>/dev/null`
if [ ! -n "${lspci}" ];then
    echo "fc_info=系统未安装pciuntils工具包，无法获取光纤卡信息"
else
    FC=`lspci |grep "Fibre Channel" |awk -F ':' '{print $3}' |awk -F 'to' '{print $1}' |sed 's/^[ \t]*//g'`
    if [ ! -n "${FC}" ];then
        echo "fc_info=null"
    else
        echo "fc_info=`echo ${FC}`"
    fi
fi

#RAID卡信息
lspci=`lspci 2>/dev/null`
if [ ! -n "${lspci}" ];then
    echo "raid_info=系统未安装pciuntils工具包，无法获取raid卡信息"
else
    RAID_ID=`lspci |grep RAID |awk -F ':' '{print $NF}' |awk -F '(' '{print $1}' |awk -F '[' '{print $1}' |sed 's/^[ \t]*//g'`
    if [ ! -n "${RAID_ID}" ];then
        echo "raid_info=null"
    else
        echo "raid_info=${RAID_ID}"
    fi
fi

#网卡信息
lspci=`lspci 2>/dev/null`
if [ ! -n "${lspci}" ];then
   echo "nic_info=系统未安装pciuntils工具包，无法获取网卡信息"
else
    nic_name=`lspci |grep -i eth |awk -F': ' '{print $2}'`
    nic_num=`lspci |grep -i eth |awk -F': ' '{print $2}' |wc -l`
    if [ $nic_num == 0 ];then
        echo "nic_info=未安装网卡"
    elif [ $nic_num == 1 ];then
        echo "nic_info=${nic_name}"
    else
        nic_name_a=`lspci |grep -i eth |awk -F': ' '{print $2}' |tr '\n' '</td><td>'`
        echo "nic_info=<table class^\"new_table\"><tr><td>${nic_name_a}</td></tr></table>"
    fi
fi

#主机名词
hostname=`hostname`
echo "hostname=${hostname}"

#操作系统版本
sys_name=`cat /etc/redhat-release`
echo "operating_system=${sys_name}"

#系统内核版本
uname=`uname -r`
echo "system_kernel=${uname}"

#系统安装时间
rpm_time=`rpm -qa |grep ^coreutils-* |head -n 1`
system_install_time=`rpm -qi ${rpm_time} |grep "Build Date" |awk -F"Build Date" '{print $2}' |awk '{print $5,$4,$3,$2,$6}'`
echo "system_install_time=${system_install_time=}"

#时区设置
case $systemnum in
7)
time_zone=`ls -l /etc/localtime |awk -F'/' '{print $(NF-1),$NF}' |tr ' ' '/'`
echo "time_set=${time_zone}"
;;
*)
time_zone=`cat /etc/sysconfig/clock |grep  ZONE |awk -F'"' '{print $2}' |grep -v ^$`
echo "time_set=${time_zone}"
;;
esac

#带Shell的用户
shell_user=`cat /etc/passwd |egrep -v "nologin|shutdown" |grep sh |awk -F ':' '{print $1}' |tr '\n' ',' |sed "s/\,$//g"`
echo "shell_account=${shell_user}"

#LIMIT参数设置情况
m=`cat /etc/security/limits.conf |grep -v "^#" |grep -v "^$"  |tr -s [:space:]`
n=`cat /etc/security/limits.conf |grep -v "^#" |grep -v "^$"  |tr -s [:space:] |wc -l`
if [ -n "${m}" ];then
    echo "limit_set=<table class^\"new_table\">" |tr -d '\n'
    for i in  `seq 1 $n`
    do
        if [ -n "${m}" ];then
            read a b c d < <(cat /etc/security/limits.conf |grep -v "^#" |grep -v "^$"  |tr -s [:space:] |sed -n ${i}p)
            echo "<tr><td>$a</td><td>$b</td><td>$c</td><td>$d</td></tr>" |tr -d '\n'
        fi
    done
    echo "</table>"
else
    echo "limit_set=null"
fi

#openssh开启的端口
ssh_port=`cat /etc/ssh/sshd_config |grep -v "^#" |grep Port |awk '{print $2}'`
if [ -n "${ssh_port}" ];then
    echo "openssh_port=${ssh_port}"
else
    echo "openssh_port=22"
fi

#sftp是否开启
sftp=`cat /etc/ssh/sshd_config |grep -v "^#" |grep sftp |grep -i subsystem`
if [ -n "$sftp" ];then
    echo "openssh_sftp_status=sftp已开启"
else
    echo "openssh_sftp_status=sftp禁用"
fi

#密钥认证机制
ssh_pass=`cat /etc/ssh/sshd_config |grep -v "^#" |grep "PasswordAuthentication" |grep 'yes'`
if [ -n "$ssh_pass" ];then
    echo "openssh_key_auth=允许密码登陆"
else
    echo "openssh_key_auth=禁止密码登陆"
fi

#系统运行时间
uptime=`uptime |awk -F ',' '{print $1}' |awk '{print $3,$4}'`
echo "sys_running_time=${uptime}"

#物理内存使用情况
#mem_total=`free -m |grep Mem |awk '{print $2}'`
#mem_total_g=$(printf "%.2f" `echo "scale=2; ${mem_total}/1024" |bc`)
#mem_used=`free -m |grep Mem |awk '{print $3}'`
#mem_used_g=$(printf "%.2f" `echo "scale=2; ${mem_used}/1024" |bc`)
#mem_free=`free -m |grep Mem |awk '{print $4}'`
#mem_free_g=$(printf "%.2f" `echo "scale=2; ${mem_free}/1024" |bc`)
#mem_per=$(printf "%d%%" $((${mem_used}*100/${mem_total})))
#echo "mem_use_status=<table class^\"new_table\"><tr><th>内存总量</th><th>已用内存</th><th>空闲内存</th><th>内存使用率</th></tr><tr><td>${mem_total_g}G</td><td>${mem_used_g}G</td><td>${mem_free_g}G</td><td>${mem_per}</td></tr></table>"
#
case $systemnum in
7)
mem_total_m=$(free -m |grep Mem |awk '{print $2}')
mem_used_m=$(free -m |grep Mem |awk '{print $3}')
mem_free_m=$(free -m |grep Mem |awk '{print $4}')
mem_buff_cache_m=$(free -m |grep Mem |awk '{print $6}')
mem_real_free=$[${mem_free_m}+${mem_buff_cache_m}]
mem_real_used=$[${mem_total_m}-${mem_real_free}]
mem_per=$(printf "%d%%" $((${mem_real_used}*100/${mem_total_m})))
;;
*)
mem_total_m=$(free -m |grep Mem |awk '{print $2}')
mem_used_m=$(free -m |grep Mem |awk '{print $3}')
mem_free_m=$(free -m |grep Mem |awk '{print $4}')
mem_buffers_m=$(free -m |grep Mem |awk '{print $6}')
mem_cached_m=$(free -m |grep Mem |awk '{print $7}')
mem_real_free=$[${mem_free_m}+${mem_buffers_m}+${mem_cached_m}]
mem_real_used=$[${mem_total_m}-${mem_real_free}]
mem_per=$(printf "%d%%" $((${mem_real_used}*100/${mem_total_m})))
;;
esac
echo "mem_use_status=<table class^\"new_table\"><tr><th>内存总量</th><th>已用内存</th><th>空闲内存</th><th>内存使用率</th></tr><tr><td>${mem_total_m}M</td><td>${mem_real_used}M</td><td>${mem_real_free}M</td><td>${mem_per}</td></tr></table>"

#已登录用户信息
m=`who |wc -l`
if [ $m == 0 ];then
    echo "login_account_info=null"
else
    echo  "login_account_info=<table class^\"new_table\">" |tr -d '\n'
    for i in `seq 1 $m`
    do
        read a b c d e f < <(who |tr -s [:space:] |sed -n ${i}p)
        echo "<tr><td>${a}</td><td>${b}</td><td>${c}</td><td>${d}</td><td>${e}</td><td>${f}</td></tr>" |tr -d '\n'
    done
    echo "</table>"
fi

#已配置的定时任务
#for user in $(cut -f1 -d: /etc/passwd)
#do 
#    for i in `crontab -l -u ${user} 2>/dev/null`
#    do
#        n=`crontab -l -u ${user} |wc -l`
#        for m in `seq 1 $n`
#        do  
#            a=`crontab -l -u ${user} 2>/dev/null |sed -n "${m}p" |awk 'BEGIN{} {print $1","$2","$3","$4","$5","$6",} END{}'`
#            b=`crontab -l -u ${user} 2>/dev/null |sed -n "${m}p" |awk '{for(i=7;i<=NF;i++) printf("%s ", $i)}'`
#            echo "${a}${b};"
#        done
#    done
#done
z=0
echo "task_info=<table class^\"new_table\">" |tr -d '\n'
for user in $(cut -f1 -d: /etc/passwd)
do
    cron=`crontab -l -u ${user} 2>/dev/null`
    if [ -n "$cron" ];then
        n=`crontab -l -u ${user} |wc -l`
        for m in `seq 1 $n`
        do
            let z+=1
	    read a b c d e f < <(crontab -l -u ${user} |sed -n "${m}p" |sed "s/$/;/g")
            echo "<tr><td>$a</td><td>$b</td><td>$c</td><td>$d</td><td>$e</td><td>$user</td><td>$f</td><tr>" |tr -d '\n'
        done
    fi
done
if [ $z == 0 ];then
	echo "null</table>"
else
	echo "</table>"
fi
#开机自动挂载的分区
n=`cat /etc/fstab |grep -v "^#" |grep -v "^$" |wc -l`
echo  "boot_mount_part=<table class^\"new_table\">" |tr -d '\n'
for i in `seq 1 $n`
do
    m=`cat /etc/fstab |grep -v "^#" |grep -v  ^$ |sed -n "${i}p" |tr -s [:space:]`
    read a b c d e f < <(echo $m)
    a=`echo  $a |tr '=' '^' 2>/dev/null`
    d=`echo  $d |tr '=' '^' 2>/dev/null`
    echo "<tr><td>$a</td><td>$b</td><td>$c</td><td>$d</td><td>"$e"</td><td>"$f"</td><tr>" |tr -d '\n'
done
echo "</table>"

#网卡信息
ethernet_info=`ip a |grep "inet " | egrep -v '127.0.0.1|bond' |grep -v MASTER|awk '{print $NF,$2}'`
ethernet_num=`ip a |grep "inet " | egrep -v '127.0.0.1|bond' |grep -v MASTER|awk '{print $NF,$2}' |wc -l`
echo  "ethernet_info=<table class^\"new_table\">" |tr -d '\n'
for i in `seq 1 $ethernet_num`
do
    ethernet=`ip a |grep "inet " | egrep -v '127.0.0.1|bond' |grep -v MASTER|awk '{print $NF,$2}' |sed -n ${i}p`
    read a b < <(echo $ethernet)
    echo "<tr><td>$a</td><td>$b</td></tr>" |tr -d '\n'
done
echo "</table>"

#网卡绑定信息
bond_name=`ip a |grep  MASTER |awk -F': ' '{print $2}'`
if [ -n "${bond_name}" ];then
    echo "nic_bond_info=<table class^\"new_table\"><tr><th>name</th><th>member</th><th>status</th></tr>" |tr -d '\n'
    for bond in $bond_name
    do
        slave_name=`ip a |grep master|grep $bond |awk -F': ' '{print $2}' |tr '\n' ' ' |sed 's/[ \t]*$//g'`
        if [ -n "${slave_name}" ];then
            echo "<tr><td>${bond}</td>${slave_name}<td>启用</td></tr>" |tr -d '\n'
        else
            echo "<tr><td>${bond}</td>${slave_name}<td>未启用</td></tr>" |tr -d '\n'
        fi
    done
    echo "</table>"
else
    echo "nic_bond_info=null"
fi

#NFS挂载状态
nfs_info=$(mount 2>/dev/null | grep ':/' |tr '\n' ';')
if [ -n "${nfs_info}" ];then
   echo "nfs_info=${nfs_info}"
else
    echo "nfs_info=null"
fi

#多路径管理软件运行状态
multipathflag=1
multi_status=`multipath -ll 2>/dev/null|grep status`
if [ -n "${multi_status}" ];then
    multipathflag=0
    multi_err=`multipath -ll |egrep -i 'failed|disabled'`
    if [ -n "${multipathflag}" ];then
        echo "multi_path_info=多路径异常，请检查"
    else
        echo "multi_path_info=正常"
    fi
fi
powermt_status=`powermt display dev=all 2>/dev/null |grep state`
if [ -n "${powermt_status}" ];then
    multipathflag=0
    powermt_err=`powermt display dev=all |egrep -i 'failed|disabled'`
    if [ -n "${powermt_err}" ];then
        echo "multi_path_info=多路径异常,请检查"
    else
        echo "multi_path_info=正常"
    fi
fi
if [ ${multipathflag} -ne 0 ];then
    echo "multi_path_info=null"
fi

#监听的端口和进程信息
netstat=`which netstat 2>/dev/null`
if [ ! -n "$netstat" ];then
    echo "monitor_port=系统未安装net-tools，无法获取端口进程信息"
else
    num=`netstat -tunpel |awk '{print  $1,$4,$NF}' |sed '1,2d' |wc -l`
    echo "monitor_port=<table class^\"new_table\"><tr><th>protocol</th><th>port</th><th>process_name</th></tr>" |tr -d '\n'
    for i in `seq 1 $num`
    do 
        read a b c < <(netstat -tunpel |awk '{print $1,$4,$NF}' |sed '1,2d' |sed -n "${i}p")
        echo "<tr><td>${a}</td><td>${b}</td><td>${c}</td></tr>" |tr -d '\n'
    done
    echo '</table>'
fi

#############################参数配置###########################
#run_mode=3
#umask_set=027
#password_max_day=90
#password_min_day=6
#password_min_length=8
#password_warn_day=10
#password_rem_times=5
#password_try_times=3
#password_lock_time=600
#remote_timeout=900
#sys_load_info=3
#swap_use_status=30%
#disk_use_status=90%
#inode_use_status=90%
#login_failed_times=100
################################################################
#NTP配置
warn=0
#ntpdate=`cat /etc/crontab |grep -v "^#" |grep ntpdate`
ntpdate=`cat /var/spool/cron/root |grep -v '^\s*#'|grep 'ntpdate'` || ntpdate=''
case ${systemnum} in
7)
chronyserver=$(cat /etc/chrony.conf 2> /dev/null | egrep -v '^$|^\s*#' | egrep '^(\s.*)?server' | egrep -v 'rhel|127.127.1.0|centos' |awk '{print $2}' |tr '\n' ',' |sed "s/\,$//g")
systemctl status chronyd.service &> /dev/null
chronyd=$?
if [ -n "${chronyserver}" -a "${chronyd}" -eq 0 ];then
    warn=1
    chronyd_status=`chronyc sources -v 2>/dev/null |egrep '*|+'`
    if [ -n "${chronyd_status}" ];then
        echo "ntp_set=系统设置了时间服务器,且连接正常:${chronyserver}" |tr -d '\n'
    else
        echo "ntp_set=系统配置了时间服务器，但连接异常，请检查:${chronyserver}" |tr -d '\n'
    fi
fi
;;
*)
ntpserver=`cat /etc/ntp.conf 2>/dev/null |egrep '^(\s.*)?server' | egrep -v 'rhel|127.127.1.0|centos' |awk '{print $2}' |tr '\n' ',' |sed "s/\,$//g"`
service ntpd status &> /dev/null
ntpd=$?
if [ -n "${ntpserver}" -a "${ntpd}" -eq 0 ];then
    warn=1
    ntpd_status=`ntpq -p 2>/dev/null |egrep '*|+'`
    if [ -n "${ntpd_status}" ];then
        echo "ntp_set=系统设置了时间服务器,且连接正常:${ntpserver}" |tr -d '\n'
    else
        echo "ntp_set=系统配置了时间服务器，但连接异常，请检查:${ntpserver}" |tr -d '\n'
    fi
fi
;;
esac
if [[ ${warn} -eq 1 && -n "${ntpdate}" ]];then
echo ";系统还设置ntpdate计划任务同步时间服务器:" |tr -d '\n' && echo "${ntpdate}" |tr -d '\n'
elif [[ ${warn} -eq 0 && -n "${ntpdate}" ]];then
echo "ntp_set=已设置ntpdate计划任务同步时间服务器:" | tr -d '\n' && echo "${ntpdate}" |tr -d '\n'&& warn=1
fi

if [[ ${warn} -eq 1 ]];then
echo '@@0'
elif [[ ${warn} -eq 0 ]];then
echo "ntp_set=未设置@@1"
fi




#系统运行模式
runlevel=`runlevel |awk '{print $2}'`
warn=0
if [ ${runlevel} -ne ${run_mode} ];then
    warn=1
    echo "run_mode=${runlevel}@@1"
else
    echo "run_mode=${runlevel}@@0"
fi

#日志审核
case $systemnum in
5)
service syslog status &>/dev/null
syslog=$?
if [ "${syslog}" -eq 0 ];then
	  echo "syslog_audit=启用@@0"
else
    echo "syslog_audit=未启用@@1"
fi
;;
7)
systemctl status systemd-journald.service &>/dev/null
systemd_journald=$?
if [ "${systemd_journald}" -eq 0 ];then
    echo "syslog_audit=启用@@0"
else
    echo "syslog_audit=未启用@@1"
fi
;;
*)
service rsyslog status &>/dev/null
rsyslog=$?
if [ "${rsyslog}" -eq 0 ];then
    echo "syslog_audit=启用@@0"
else
    echo "syslog_audit=未启用@@1"
fi
;;
esac

#syslog日志转储策略
logrotate=`cat /etc/logrotate.conf |grep -v "^#" |grep -v ^$ |egrep rotate`
if [ -n "${logrotate}" ];then
    echo "syslog_dump=启用@@0"
else
    echo "syslog_dump=未启用@@1"
fi

#系统审计
case $systemnum in
7)
systemctl status auditd.service &> /dev/null
audit=$?
if [ "${audit}" -eq 0 ];then
    echo "sys_audit=启用@@0"
else
    echo "sys_audit=未启用@@1"
fi
;;
*)
service auditd status &>/dev/null
audit=$?
if [ "${audit}" -eq 0 ];then
    echo "sys_audit=启用@@0"
else
    echo "sys_audit=未启用@@1"
fi
;;
esac

#网络日志服务器功能
case $systemnum in
5)
syslog=`cat /etc/syslog.conf 2>/dev/null |grep -v "^#" |grep '@'`
if [ -n "${syslog}" ];then
    echo "log_net=启用@@0"
else
    echo "log_net=未启用@@1"
fi
;;
*)
rsyslog=`cat /etc/rsyslog.conf 2>/dev/null |grep -v "^#" |grep '@'`
if [ -n "${rsyslog}" ];then
    echo "log_net=启用@@0"
else
    echo "log_net=未启用@@1"
fi
;;
esac

#glipc漏洞
rv=0
for glibc_nvr in $( rpm -q --qf '%{name}-%{version}-%{release}.%{arch}\n' glibc ); do
    glibc_ver=$( echo "$glibc_nvr" | awk -F- '{ print $2 }' )
    glibc_maj=$( echo "$glibc_ver" | awk -F. '{ print $1 }')
    glibc_min=$( echo "$glibc_ver" | awk -F. '{ print $2 }')
    if [ "$glibc_maj" -gt 2   -o  \( "$glibc_maj" -eq 2  -a  "$glibc_min" -ge 18 \) ]; then
        # fixed upstream version
        echo '' |tr -d '\n'
    else
        # all RHEL updates include CVE in rpm %changelog
        if rpm -q --changelog "$glibc_nvr" | grep -q 'CVE-2015-0235'; then
        echo '' |tr -d '\n'
        else
            rv=1
        fi
    fi
done
if [ $rv -ne 0 ]; then
    echo "glipc_vulnerabilities=CVE-2015-0235@@1"
else
    echo "glipc_vulnerabilities=无@@0"
fi

#bash漏洞
VUNERABLE=false;
CVE20146271="$(env 'x=() { :;}; echo vulnerable' 'BASH_FUNC_x()=() { :;}; echo vulnerable' bash -c "echo test" 2>&1 )"
CVE20147169=$(cd /tmp 2>&1; rm -f /tmp/echo 2>&1; env 'x=() { (a)=>\' bash -c "echo uname" 2>&1; cat /tmp/echo 2>&1; rm -f /tmp/echo 2>&1 )
if [[ "$CVE20146271" =~ "vulnerable" ]];then
    CVE_20146217=vulnerable
    VUNERABLE=true;
elif [[ "$CVE20146271" =~ "bash: error importing function definition for 'x'" ]];then
    CVE_20146217=notfix
else
    CVE_20146217=safety
fi
if [[ "$CVE20147169" =~ "Linux" ]];then
    CVE_20147169=vulnerable
    VUNERABLE=true;
else
    CVE_20147169=safety
fi
if [[ "$VUNERABLE" = true ]];then
	echo "bash_vulnerabilities=" |tr -d '\n'
	[[ "${CVE_20146217}" = vulnerable ]] && echo "CVE-2014-6271" |tr -d '\n'
	[[ "${CVE_20147169}" = vulnerable ]] && echo ",CVE-2014-7169" |tr -d '\n'
	echo "@@1"
else
	echo "bash_vulnerabilities=无@@0"
fi

#openssl漏洞
openssl=`rpm -qa |grep ^openssl-[0-9] |awk -F- '{print $3}' |awk -F. '{print $1}' |uniq`
case $systemnum in
5)
a=0
echo "openssl_vulnerabilities=" |tr -d '\n'
CVE_2016_0800=39
[[ ${CVE_2016_0800} -gt $openssl ]] && let a+=1 && echo "CVE-2016-0800" |tr -d '\n'
if [[ $a -ne 0 ]];then
	echo "@@1"
else
	echo "无@@0"
fi
;;
6)
a=0
echo "openssl_vulnerabilities=" |tr -d '\n'
CVE_2016_0800=42;CVE_2014_8176=30
[[ ${CVE_2016_0800} -gt $openssl ]] && let a+=1 && echo "CVE-2016-0800" |tr -d '\n'
[[ ${CVE_2014_8176} -gt $openssl ]] && let a+=1 && echo "CVE-2014-8176" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
7)
a=0
echo "openssl_vulnerabilities=" |tr -d '\n'
CVE_2016_0800=8;CVE_2014_8176=8
[[ ${CVE_2016_0800} -gt $openssl ]] && let a+=1 && echo "CVE-2016-0800" |tr -d '\n'
[[ ${CVE_2014_8176} -gt $openssl ]] && let a+=1 && echo "CVE-2014-8176" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
*)
a=0
echo "openssl_vulnerabilities=" |tr -d '\n'
CVE_2016_0800=51;CVE_2014_8176=42
[[ ${CVE_2016_0800} -gt $openssl ]] && let a+=1 && echo "CVE-2016-0800" |tr -d '\n'
[[ ${CVE_2014_8176} -gt $openssl ]] && let a+=1 && echo ",CVE-2014-8176" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
esac

#openssh漏洞
openssh=`rpm -qa |grep ^openssh-[0-9] |awk -F- '{print $3}' |awk -F. '{print $1}'`
case $systemnum in
5)
echo "openssh_vulnerabilities=null@@0" 
;;
6)
a=0
echo "openssh_vulnerabilities=" |tr -d '\n'
CVE_2015_5600=114;
[[ ${CVE_2015_5600} -gt $openssh ]] && let a+=1 && echo "CVE-2015-5600" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
7)
a=0
echo "openssh_vulnerabilities=" |tr -d '\n'
CVE_2016_0778=11;
[[ ${CVE_2016_0778} -gt $openssh ]] && let a+=1 && echo "CVE-2016-0778" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
*)
a=0
echo "openssh_vulnerabilities=" |tr -d '\n'
CVE_2015_5600=22;CVE_2016_0778=23;
[[ ${CVE_2015_5600} -gt $openssh ]] && let a+=1 && echo "CVE-2015-5600" |tr -d '\n'
[[ ${CVE_2016_0778} -gt $openssh ]] && let a+=1 && echo ",CVE-2016-0788" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
esac

#ntp漏洞
ntp=`rpm -qa |grep ^ntp-[0-9] |awk -F- '{print $3}' |awk -F. '{print $1}'`
case $systemnum in
5)
a=0
echo "ntp_vulnerabilities=" |tr -d '\n'
CVE_2014_9294=18;CVE_2014_9293=18;CVE_2014_9295=18
[[ ${CVE_2014_9294} -gt $ntp ]] && let a+=1 && echo "CVE-2014-9294" |tr -d '\n'
[[ ${CVE_2014_9293} -gt $ntp ]] && let a+=1 && echo ",CVE-2014-9293" |tr -d '\n'
[[ ${CVE_2014_9295} -gt $ntp ]] && let a+=1 && echo ",CVE-2014-9295" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
6)
a=0
echo "ntp_vulnerabilities=" |tr -d '\n'
CVE_2014_9294=2;CVE_2014_9293=2;CVE_2014_9295=2
[[ ${CVE_2014_9294} -gt $ntp ]] && let a+=1 && echo "CVE-2014-9294" |tr -d '\n'
[[ ${CVE_2014_9293} -gt $ntp ]] && let a+=1 && echo ",CVE-2014-9293" |tr -d '\n'
[[ ${CVE_2014_9295} -gt $ntp ]] && let a+=1 && echo ",CVE-2014-9295" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
*)
a=0
echo "ntp_vulnerabilities=" |tr -d '\n'
CVE_2014_9294=19;CVE_2014_9293=19;CVE_2014_9295=19
[[ ${CVE_2014_9294} -gt $ntp ]] && let a+=1 && echo "CVE-2014-9294" |tr -d '\n'
[[ ${CVE_2014_9293} -gt $ntp ]] && let a+=1 && echo ",CVE-2014-9293" |tr -d '\n'
[[ ${CVE_2014_9295} -gt $ntp ]] && let a+=1 && echo ",CVE-2014-9295" |tr -d '\n'
if [[ $a -ne 0 ]];then
    echo "@@1"
else
    echo "无@@0"
fi
;;
esac


#空口令的帐号
emptypasswd=`awk -F: '($2 == "") { print $1 }' /etc/shadow |tr '\n' ',' |sed "s/\,$//g"`
if [ "$emptypasswd" ];then
    echo "empty_password_account=${emptypasswd}@@1"
else
    echo "empty_password_account=null@@0"
fi

#UID为0的非root帐号
uid0=`awk -F: '($3 == 0) { print $1 }' /etc/passwd |grep -v root |tr '\n' ',' |sed "s/\,$//g"`
if [ -n "$uid0" ];then
    echo "uid0_account=${uid0}@@1"
else
    echo "uid0_account=null@@0"
fi

#UMASK值设置
case $systemnum in
5)
#umask_v=`cat /etc/bashrc |grep -v "^\s*#" |grep -i umask|sed -n '1p' |awk '{print $2}'`
umask_v=`umask | sed 's/0//'`
if [ $umask_set -ne $umask_v ];then
    echo "umask_set=${umask_v}@@1"
else
    echo "umask_set=${umask_v}@@0"
fi
;;
*)
#umask_v=`cat /etc/profile |grep -v "^\s*#" |grep -i umask|sed -n '1p' |awk '{print $2}'`
umask_v=`umask | sed 's/0//'`
if [ $umask_set -ne $umask_v ];then
    echo "umask_set=${umask_v}@@1"
else
    echo "umask_set=${umask_v}@@0"
fi
;;
esac

#密码最长使用天数
max_day=`more /etc/login.defs | grep -E "PASS_MAX_DAYS" | grep -v "#" |awk -F' ' '{print $2}'`
if [ $max_day -le $password_max_day ];then
    echo "password_max_day=${max_day}@@0"
else
    echo "password_max_day=${max_day}@@1"
fi

#密码最短使用天数
min_day=`more /etc/login.defs | grep -E "PASS_MIN_DAYS" | grep -v "#" |awk -F' ' '{print $2}'`
if [ $min_day -ge $password_min_day ];then
    echo "password_min_day=${min_day}@@0"
else
    echo "password_min_day=${min_day}@@1"
fi

#密码需要满足的最短长度
min_len=`more /etc/login.defs | grep -E "PASS_MIN_LEN" | grep -v "#" |awk -F' ' '{print $2}'`
if [ $min_len -ge $password_min_length ];then
    echo "password_min_length=${min_len}@@0"
else
    echo "password_min_length=${min_len}@@1"
fi

#用户密码到期前警告天数
warn_age=`more /etc/login.defs | grep -E "PASS_WARN_AGE" | grep -v "#" |awk -F' ' '{print $2}'`
if [ $warn_age -ge $password_warn_day ];then
    echo "password_warn_day=${warn_age}@@0"
else
    echo "password_warn_day=${warn_age}@@1"
fi

#用户密码复杂度策略
pam_pwquality=$(cat /etc/pam.d/system-auth |egrep -v "^(s*)#" |grep password |grep pam_pwquality.so)
pam_cracklib=$(cat /etc/pam.d/system-auth |egrep -v "^(s*)#" |grep password |grep pam_cracklib.so)
if [ -n "$pam_cracklib" ];then
    dcredit=`cat /etc/pam.d/system-auth |grep pam_cracklib.so |grep dcredit |awk -F'dcredit=-' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    lcredit=`cat /etc/pam.d/system-auth |grep pam_cracklib.so |grep lcredit |awk -F'lcredit=-' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    ucredit=`cat /etc/pam.d/system-auth |grep pam_cracklib.so |grep ucredit |awk -F'ucredit=-' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    ocredit=`cat /etc/pam.d/system-auth |grep pam_cracklib.so |grep ocredit |awk -F'ocredit=-' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    retry=`cat /etc/pam.d/system-auth |grep pam_cracklib.so |grep retry |awk -F'retry=' '{print $2}' |awk '{print $1}' |uniq | head -n 1`
    minlen=`cat /etc/pam.d/system-auth |grep pam_cracklib.so |grep minlen |awk -F'minlen=' '{print $2}' |awk '{print $1}' |uniq | head -n 1`
    difok=`cat /etc/pam.d/system-auth |grep pam_cracklib.so |grep difok |awk -F'difok=' '{print $2}' |awk '{print $1}' |uniq | head -n 1`
    enforce_for_root=`cat /etc/pam.d/system-auth |grep pam_cracklib.so |grep enforce_for_root  |uniq |head -n 1`
elif [ -n "${pam_pwquality}" ];then
    dcredit=`cat /etc/pam.d/system-auth |grep pam_pwquality.so |grep dcredit |awk -F'dcredit=-' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    lcredit=`cat /etc/pam.d/system-auth |grep pam_pwquality.so |grep lcredit |awk -F'lcredit=-' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    ucredit=`cat /etc/pam.d/system-auth |grep pam_pwquality.so |grep ucredit |awk -F'ucredit=-' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    ocredit=`cat /etc/pam.d/system-auth |grep pam_pwquality.so |grep ocredit |awk -F'ocredit=-' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    retry=`cat /etc/pam.d/system-auth |grep pam_pwquality.so |grep retry |awk -F'retry=' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    minlen=`cat /etc/pam.d/system-auth |grep pam_pwquality.so |grep minlen |awk -F'minlen=' '{print $2}' |awk '{print $1}' |uniq |head -n 1`
    difok=`cat /etc/pam.d/system-auth |grep pam_pwquality.so |grep difok |awk -F'difok=' '{print $2}' |awk '{print $1}'  |uniq |head -n 1`
    enforce_for_root=`cat /etc/pam.d/system-auth |grep pam_pwquality.so |grep enforce_for_root  |uniq |head -n 1`
fi
a=0
echo "password_complexity=" |tr -d '\n'
[ -n "${dcredit}" ] && let a+=1 && echo "${dcredit}个数字" |tr -d '\n'
[ -n "${lcredit}" ] && let a+=1 && echo ",${lcredit}个小写字母" |tr -d '\n'
[ -n "${ucredit}" ] && let a+=1 && echo ",${ucredit}个大写字母" |tr -d '\n'
[ -n "${ocredit}" ] && let a+=1 && echo ",${ocredit}个特殊字符" |tr -d '\n'
[ -n "${minlen}" ] && let a+=1 && echo ",最小长度为${minlen}" |tr -d '\n'
[ -n "${difok}" ] && let a+=1 && echo ",最小允许和旧密码相同字符数为${difok}个" |tr -d '\n'
[ $a -ne 0 ] && [ -n "${retry}" ] && let a+=1 && echo ",最多可以${retry}次输入密码后报错" |tr -d '\n'
if [ $a -ne 0 ];then
	echo "@@0"
else
	echo "未设置@@1"
fi

#密码重复使用次数
rem=`cat /etc/pam.d/system-auth |grep -v "^#" |egrep password |grep pam_unix.so |grep remember |awk -F'remember=' '{print $2}' |awk '{print $1}'`
if [ ! -n "${rem}" ];then
    echo "password_rem_times=未设置@@1"
else
    [ $rem -ge $password_rem_times ] && echo "password_rem_times=${rem}@@0" || echo "password_rem_times=${rem}@@1"
fi

#密码允许尝试登录次数
deny=`cat /etc/pam.d/system-auth |grep -v "^#" |egrep auth |grep pam_tally2.so |grep deny`
deny_time=`[ -n "$deny" ] && echo ${deny#*deny=} |awk '{print $1}'`
if [ ! -n "${deny_time}" ];then
    echo "password_try_times=未设置@@1"
else
    [ $deny_time -gt $password_try_times ] && echo "password_try_times=${deny_time}@@1" || echo "password_try_times=${deny_time}@@0"
fi

#密码登陆失败锁定时间
deny=`cat /etc/pam.d/system-auth |grep -v "^#" |egrep auth |grep pam_tally2.so |grep deny`
unlocktime=`[ -n "$deny" ] && echo ${deny#*unlock_time=} |awk '{print $1}'`
if [ ! -n "${unlocktime}" ];then
    echo "password_lock_time=未设置@@1"
else
    [ $unlocktime -lt $password_lock_time ] && echo "password_lock_time=${unlocktime}@@1" || echo "password_lock_time=${unlocktime}@@0"
fi

#IP伪装功能状态
ip_spool=`cat /etc/host.conf 2>/dev/null |grep -v "^#" |grep nospoof |grep on`
if [ -n "${ip_spool}" ];then
    echo "ip_disguise=已关闭@@0"
else
    echo "ip_disguise=未关闭@@1"
fi

#是否关闭多ip绑定
ip_multi=`cat /etc/host.conf 2>/dev/null |grep -v "^#" |grep multi |grep off`
if [ -n "${ip_multi}" ];then
    echo "ip_multi=已关闭@@0"
else
    echo "ip_multi=未关闭@@1"
fi

#数据包转发功能状态
ip_forward=`cat /proc/sys/net/ipv4/ip_forward`
if [ $ip_forward -ne 0 ];then
    echo "ip_forward=未禁用@@1"
else
    echo "ip_forward=已禁用@@0"
fi

#ICMP接收重定向转发功能
all_accept_redirects=`cat /proc/sys/net/ipv4/conf/all/accept_redirects`
default_accept_redirects=`cat /proc/sys/net/ipv4/conf/default/accept_redirects`
if [ ${all_accept_redirects} -ne 0 -a ${default_accept_redirects} -ne 0 ];then
    echo "icmp_accept_redirect=未关闭@@1"
else
    echo "icmp_accept_redirect=已关闭@@0"
fi

#ICMP发送重定向转发功能
icmp_send_redirect=`cat /proc/sys/net/ipv4/conf/all/send_redirects`
if [ ${icmp_send_redirect} -ne 0 ];then
    echo "icmp_send_redirect=未关闭@@1"
else
    echo "icmp_send_redirect=已关闭@@0"
fi

#远程连接的超时时间（s）
TMOUT=`cat /etc/profile |grep -v "^#" |grep -i TMOUT |egrep -o '[0-9].*'`
if [ ! -n "${TMOUT}" ];then
    echo "remote_timeout=未设置@@1"
else
    [ ${TMOUT} -gt $remote_timeout ] && echo "remote_timeout=${TMOUT}@@1" || echo "remote_timeout=${TMOUT}@@0"
fi

#GRUB密码设置
case $systemnum in
7)
grub2pas=`cat /etc/grub.d/00_header |grep -v "^#" |grep password`
if [ -n "${grub2pas}" ];then
    echo "grub_password=已启用@@0"
else
    echo "grub_password=未启用@@1"
fi
;;
*)
grubpas=`cat /boot/grub/grub.conf 2>/dev/null |grep -v "^#" |grep "password*"`
menupas=`cat /boot/grub/menu.lst 2>/dev/null |grep -v "^#" |grep "password*"`
lilopas=`cat /etc/lilo.conf 2>/dev/null |grep -v "^#" |grep "password*"`
if [ -n "${grubpas}" -o -n "${menupas}" -o -n "${lilopas}" ];then
    echo "grub_password=已启用@@0"
else
    echo "grub_password=未启用@@1"
fi
;;
esac


#系统的CORE DUMP
core_dump=$(ulimit -c)
if [ -n ${core_dump} ];then
    echo "core_dump=已启用@@0"
else
    echo "core_dump=未启用@@1"
fi

#Ctrl+Alt+Del组合键启用状态
case $systemnum in
5)
ctrl_alt_del=`cat /etc/inittab |grep -v "^#" |grep ctrlaltdel |grep shutdown`
if [ -n "${ctrl_alt_del}" ];then
    echo "ctrl_alt_del=关闭@@0"
else
    echo "ctrl_alt_del=未关闭@@1"
fi
;;
6)
ctrl_alt_del=`cat /etc/init/control-alt-delete.conf |grep -i control-alt-delete |grep shutdown`
if [ -n "${ctrl_alt_del}" ];then
    echo "ctrl_alt_del=关闭@@0"
else
    echo "ctrl_alt_del=未关闭@@1"
fi
;;
7)
ctrl_alt_del=`ls -l /usr/lib/systemd/system/ctrl-alt-del.target 2>/dev/null |grep "reboot.target"`
if [ -n "${ctrl_alt_del}" ];then
    echo "ctrl_alt_del=关闭@@0"
else
    echo "ctrl_alt_del=未关闭@@1"
fi
;;
esac

#Selinux启用状态
selinux=`cat /etc/selinux/config |grep -v "^#" |grep SELINUX |grep disabled`
if [ -n "${selinux}" ];then
    echo "selinux_status=关闭@@0"
else
    echo "selinux_status=未关闭@@1"
fi

#防火墙启用状态
case $systemnum in
7)
systemctl status firewalld.service &>/dev/null
if [ $? -ne 0 ];then
    echo "firewall_status=关闭@@0"
else
    echo "firewall_status=未关闭@@1"
fi
;;
*)
service iptables status &> /dev/null
if [ $? -ne 0 ];then
    echo "firewall_status=关闭@@0"
else
    echo "firewall_status=未关闭@@1"
fi
;;
esac

#GSSAPIAuthentication
ssh_gssAu=`cat /etc/ssh/sshd_config |grep -v "^#" |grep ^GSSAPIAuthentication |grep yes`
if [ -n "${ssh_gssAu}" ];then
    echo "GSSAPIAuthentication=yes@@1"
else
    echo "GSSAPIAuthentication=no@@0"
fi

#GSSAPICleanupCredentials
ssh_gssCl=`cat /etc/ssh/sshd_config |grep -v "^#" |grep ^GSSAPICleanupCredentials |grep yes`
if [ -n "$ssh_gssCl" ];then
    echo "GSSAPICleanupCredentials=yes@@1"
else
    echo "GSSAPICleanupCredentials=no@@0"
fi

#协议1/2开启状态
ssh_Protocol=`cat /etc/ssh/sshd_config |grep -v "^#" |grep Protocol |awk '{print $2}'`
if [[ $ssh_Protocol -eq 2 ]];then
    echo "openssh_protocol=仅开启协议2@@0"
elif [[ $ssh_Protocol -eq 1 ]];then
    echo "openssh_protocol=仅开启协议1@@1"
elif [ ! -n "$ssh_Protocol" ];then
    echo "openssh_protocol=未配置@@1"
else
    echo "openssh_protocol=既开启了协议2，也开启了协议1@@1"
fi
    
#远程root是否开启
ssh_root=`cat /etc/ssh/sshd_config |grep -v "^#" |grep PermitRootLogin |grep yes`
if [ -n "${ssh_root}" ];then
    echo "root_remote=未关闭@@1"
else
    echo "root_remote=关闭@@0"
fi

#X11Forwarding
ssh_X=`cat /etc/ssh/sshd_config |grep -v "^#" |grep ^X11Forwarding |grep yes`
if [ -n "${ssh_X}" ];then
    echo "openssh_x11=yes@@1"
else
    echo "openssh_x11=no@@0"
fi

#开机启动的服务运行状态
case $systemnum in
7)
chkconfig=`systemctl list-unit-files --type=service |grep enabled |awk '{print $1}'`
a=0
echo "boot_services_status=" |tr -d '\n'
for i in $chkconfig
do
    b=`systemctl status $i 2>/dev/null |grep "Active: active"`
    if [ ! -n "${b}" ];then
        echo "${i}" |tr '\n' ' ' && let a+=1
    fi
done
if [ $a = 0 ];then
    echo "无@@0"
else
    echo '@@1'
fi
;;
*)
service=`service --status-all 2>/dev/null |grep '(pid' |awk '{print $1}'`
chkconfig_on=`chkconfig --list |awk '{print $1,$5,$7}' |egrep ':on|"开启"' |awk '{print $1}' | egrep -v 'lvm2-monitor|firstboot|nco|ncp|tip'`
a=0
echo "boot_services_status=" |tr -d '\n'
for i in $chkconfig_on
do
    service $i status &>/dev/null
    result=$?
    if [ $result -eq 1 ];then
        echo "$i" |tr '\n' ' ' && let a+=1
    fi
done
if [ $a = 0 ];then
    echo "无@@0"
else
    echo '@@1'
fi
;;
esac

#系统负载状况(15min)
sys_load_info_num=`uptime |awk '{print $NF}' |awk -F. '{print $1}'`
sys_load_info_num_a=`uptime |awk '{print $NF}'`
processor=`cat /proc/cpuinfo |grep -c processor`
processor_num=`expr ${processor} \* ${sys_load_info}`
if [ $sys_load_info_num -gt $processor_num ]; then
    echo "sys_load_info=${sys_load_info_num_a}@@1"
else
    echo "sys_load_info=${sys_load_info_num_a}@@0"
fi

#交换分区使用情况
swap=`free -m |grep -i swap |awk '{print $2,$3,$4}'`
read a b c < <(echo ${swap})
if [ ${a} -gt 0 ];then
swap_used=$(printf "%d%%" $((b*100/a)))
else
swap_used=0%
fi
if [[ `echo $swap_used |sed "s/\%$//g"` -ge `echo $swap_use_status |sed "s/\%$//g"` ]];then
    echo "swap_use_status=<table class^\"new_table\"><tr><th>swap总量</th><th>已用swap</th><th>空闲swap</th><th>swap使用率</th><tr class^"danger"><td>${a}M</td><td>${b}M</td><td>${c}M</td><td>${swap_used}</td></tr></table>@@1"
else
    echo "swap_use_status=<table class^\"new_table\"><tr><th>swap总量</th><th>已用swap</th><th>空闲swap</th><th>swap使用率</th><tr><td>${a}M</td><td>${b}M</td><td>${c}M</td><td>${swap_used}</td></tr></table>@@0"
fi

    
#磁盘空间使用状态
m=`df -hPBM |sed '1d' |grep -v "/dev/sr" |grep -v devtmpfs |grep -v tmpfs |grep -v "loop" |wc -l`
echo "disk_use_status=<table class^\"new_table\"><tr><th>Filesystem</th><th>Size</th><th>Used</th><th>Avail</th><th>Use%</th><th>Mounted_on</th>" |tr -d '\n'
n=0
for ((i=1;i<=m;i++))
do
	disk=`df -hPBM |sed '1d' |grep -v tmpfs |grep -v devtmpfs |grep -v "/dev/sr" |sed -n "${i}p"`
	read a b c d e f < <(echo ${disk})
	f_num=`echo $e |sed "s/\%$//g"`
	if [ ${f_num} -gt  `echo ${disk_use_status} |sed "s/\%//g"` ];then
       let n+=1 && echo "<tr class^"danger"><td>${a}</td><td>${b}</td><td>${c}</td><td>${d}</td><td>${e}</td><td>${f}</td></tr>" |tr -d '\n'
        
	else
        echo "<tr><td>${a}</td><td>${b}</td><td>${c}</td><td>${d}</td><td>${e}</td><td>${f}</td></tr>" |tr -d '\n'
	fi
done
if [ "$n" == 0 ];then
    echo '</table>@@0'
else
    echo "</table>@@1"
fi

#Inode使用情况
m=`df -hiTPBK |sed '1d' |grep -v "/dev/sr" |grep -v tmpfs |grep -v devtmpfs |grep -v "loop"  |wc -l`
echo "inode_use_status=<table class^\"new_table\"><tr><th>Filesystem</th><th>Type</th><th>Inode</th><th>Iused</th><th>Ifree</th><th>IUse%</th><th>Mounted_on</th>" |tr -d '\n'
n=0
for ((i=1;i<=m;i++))
do
    read a b c d e f g < <(df -hiTPBK |sed '1d' |grep -v "/dev/sr" |grep -v tmpfs |grep -v devtmpfs |grep -v "loop"  |sed -n "${i}p")
    tmp=`echo $f |awk -F% '{print $1}'`
    inode_use_status_data=`echo ${inode_use_status} |sed "s/\%//g"`
    if [[ ${tmp} -gt $inode_use_status_data ]];then
        echo "<tr class^"danger"><td>${a}</td><td>${b}</td><td>${c}</td><td>${d}</td><td>${e}</td><td>${f}</td><td>${f}</td></tr>" |tr -d '\n' && let n+=1
    else
        echo "<tr><td>${a}</td><td>${b}</td><td>${c}</td><td>${d}</td><td>${e}</td><td>${f}</td><td>${g}</td></tr>" |tr -d '\n'
    fi
done
if [ $n == 0 ];then
    echo '</table>@@0'
else
    echo "</table>@@1"
fi

#登录失败次数（30天）
#month=`date |awk '{print $2}'`
#date=`date |awk '{print $3}'`
#month_12=`echo "Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan end"`
#last_month=`echo ${month_12#*${month}} |awk '{print $1}'`
#lastb=`lastb |egrep "$mouth|$last_month" |wc -l`
#if [ $lastb -gt 100 ];then
#    echo "login_failed_times=${lastb}@@1"
#else
#    echo "login_failed_times=${lastb}@@0"
#fi

a=`date +%s`
b=`expr $a - 2592000`
c=`date -d @$b "+%Y%m%d%H%M%S"`
l_total=`lastb |grep -v btmp |grep -v ^$ |wc -l`
l_befor=`lastb -t $c |grep -v btmp |grep -v ^$ |wc -l`
l_end=`expr $l_total - $l_befor`
lastb=`lastb |sed -n 1,${l_end}p |wc -l`
if [ $lastb -gt ${login_failed_times} ];then
    echo "login_failed_times=${lastb}@@1"
else
    echo "login_failed_times=${lastb}@@0"
fi


#僵尸进程信息
zombie=`ps -A -o stat,ppid,pid,cmd |grep -e '^[Zz]'`
if [ -n "${zombie}" ];then
    num=`ps -A -o stat,ppid,pid,cmd |grep -e '^[Zz]' |wc -l`
    echo "zombie_process=<table class^\"new_table\"><tr><th>stat</th><th>ppid</th><th>pid</th><th>cmd</th></tr>" |tr -d '\n'
    for i in `seq 1 $num`
    do    
        zombie_tmp=`ps -A -o stat,ppid,pid,cmd |grep -e '^[Zz]' |sed -n "${i}p"`    
        read a b c d < <(echo $zomebie_tmp)
        echo "<tr class^"danger"><td>${a}</td>${b}<td>${c}</td><td>${d}</td></tr>" |tr -d '\n'
    done
    echo '</table>@@1'
else
    echo "zombie_process=null@@0"
fi

#检查lvm
if $(lvs 2>/dev/null | awk '{print $1}' | grep -q 'LV'); then
    echo "lvm_set=启用@@0"
else 
    echo "lvm_set=未启用@@1"
fi

#sudo权限账号
sudoer=$(egrep -v "^#|^Default|^%wheel|^root|^$" /etc/sudoers | grep 'ALL=' | awk '{print $1}')
if [ -n "${sudoer}" ]; then
    echo "sudo_account=`echo ${sudoer}`@@1"
else
    echo "sudo_account=null@@0"
fi

#日志报错
errlog_num=$(egrep -wic "kernel.*(error|fail|warn|warning|not)" /var/log/messages)
dmesg_err_num=$(egrep -wic "kernel.*(error|fail|warn|warning|not)" /var/log/dmesg)
if [ ${errlog_num} != 0 ];then
    echo "errlog_num=${errlog_num}@@1"
else
    echo "errlog_num=${errlog_num}@@0"
fi

if [ ${dmesg_err_num} != 0 ];then
    echo "dmesg_err_num=${dmesg_err_num}@@1"
else
    echo "dmesg_err_num=${dmesg_err_num}@@0"
fi

